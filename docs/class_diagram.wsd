@startuml
scale 2
package src {
    class Main { 
        int main()
    }
    
    class AppContext {
        audio: AudioClient
        led: LedClient
        box: BoxClient
        void log(String message)
    }

    package audio {
        class AudioClient {
            model: AudioModel
            setup()
            setInput(device: ofSoundDevice)
            getInputList(): ofSoundDevice
            setSmoothing(smoothing: Float)
            audioIn(buffer: ofSoundBuffer)
            update(buffer: ofSoundBuffer)
            exit()
        }
        AudioClient <-- AudioModel 
        AppContext <-- AudioClient

        class AudioModel {
            rms : float
            power : float
            pitchFreqNorm : float
            pitchConf : float
            pitchSalience : float
            hfcNorm : float
            specCompNorm : float
            centroidNorm : float
            inharmonicity : float
            dissonance : float
            rollOffNorm : float
            oddToEvenNorm : float
            strongPeakNorm : float
            strongDecayNorm : float
            spectrum : vector<float>
            melBands : vector<float>
            mfcc : vector<float>
            hpcp : vector<float>
            tristimulus : vector<float>
            isOnset : bool
        }
    }

    package led {
        class LedClient {
            setup(params)
            beginStage()
            endStage()
            isConnected()
            drawStage()
            exit()
        }
        AppContext <-- LedClient
    }

    package windows {
        class SystemWindow {
            context: AppContext
            setup()
            update()
            draw()
            exit()
        }
        class VisualMixerWindow {
            context: AppContext
            visualList: List<BaseVisual>
            setup()
            update()
            draw()
            exit()
        }
        SystemWindow <-- AppContext
        VisualMixerWindow <-- AppContext   
        Main <.. SystemWindow
        Main <.. VisualMixerWindow
        Main <.right. AppContext
    }
    
    package box {
        AppContext <-- BoxClient


        class BoxClient {
            setConfig(configJson: String)
            BoxResult<FcState> getState()
            BoxResult<FcConfig> getConfig()
            BoxResult<void> setConfig(FcConfig model)
            BoxResult<void> start()
            BoxResult<void> stop()
            BoxResult<void> restart()
        }
        BoxClient <.down. BoxResult

        class BoxResult<T : Class> {
            bool isSuccess
            string error
            T value
        }
    
        class FcConfig {
            FcAddress listen
            FcAddress relay
            bool verbose
            FcColor color
            vector<FcMapping> devices
        }
        FcConfig <.down. BoxClient
        FcConfig <-- FcAddress
        FcConfig <-- FcColor
        FcConfig o-- FcMapping


        class FcState {
            bool isConnected
            vector<FcDevice> connectedDevices
        }
        FcState <.down. BoxClient
        FcState o--FcDevice

        class FcAddress {
            string address
            int port
        }

        class FcColor {
            float gamma
            vector<float> whitepoint
            float linearSlope
            float linearCutoff
        }
        
        class FcDevice {
            string type
            string serial
            string version
        }
        class FcMapping {
            string type
            bool dither
            bool interpolate
            string serial
            vector<tuple<int, int, int, int>> map
        }
    }


    package visuals {
        abstract class BaseVisual {
            name : String
            isEnabled : Boolean
            alpha: Float
            context: AppContext

            setup()
            update()
            draw()
            exit()
        }
        VisualMixerWindow o-- BaseVisual

        class DefaultVisual
        class StrobeVisual
        class PrismVisual

        BaseVisual <|-- DefaultVisual
        BaseVisual <|-- StrobeVisual
        BaseVisual <|-- PrismVisual
    }
}

@enduml